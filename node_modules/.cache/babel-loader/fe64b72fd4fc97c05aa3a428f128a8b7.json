{"ast":null,"code":"var _jsxFileName = \"/Users/sameer/nishant/newfolder/react-weather-app/src/components/Search/Search.tsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { DebounceInput } from 'react-debounce-input';\nimport { useDispatch } from 'react-redux';\nimport { fetchWeather } from '../../store/fetchWeather';\nimport { fetchCities } from './../../api/placeSuggestion';\nimport { useClickOutside } from './../../hooks/useClickOutside';\nimport { LocationButton, LocationIcon, SearchElement, SearchIcon, SearchInput, SearchResult } from './styled';\nimport Suggestion from './Suggestion';\n\nconst Search = () => {\n  var _suggestions$slice;\n\n  const dispatch = useDispatch();\n  const suggestionRef = useRef(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  useEffect(() => {\n    if (!searchTerm) {\n      return;\n    }\n\n    setShowSuggestions(true);\n    fetchCities(searchTerm).then(res => {\n      setSuggestions(res);\n    });\n  }, [searchTerm]);\n  useClickOutside(suggestionRef, () => setShowSuggestions(false));\n\n  const onSearchInputChanged = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  const showPosition = position => {\n    dispatch(fetchWeather({\n      lat: position.coords.latitude,\n      lng: position.coords.longitude\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(SearchElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DebounceInput, {\n    element: SearchInput,\n    debounceTimeout: 300,\n    onChange: onSearchInputChanged,\n    placeholder: \"Search for location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(LocationButton, {\n    onClick: () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(showPosition);\n      } else {\n        alert('Geolocation is not supported by this browser.');\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LocationIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })), showSuggestions && /*#__PURE__*/React.createElement(SearchResult, {\n    ref: suggestionRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, suggestions === null || suggestions === void 0 ? void 0 : (_suggestions$slice = suggestions.slice(0, 6)) === null || _suggestions$slice === void 0 ? void 0 : _suggestions$slice.map((s, i) => /*#__PURE__*/React.createElement(Suggestion, {\n    key: i,\n    label: s,\n    hideSuggestionFn: () => {\n      setShowSuggestions(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/sameer/nishant/newfolder/react-weather-app/src/components/Search/Search.tsx"],"names":["React","useEffect","useRef","useState","DebounceInput","useDispatch","fetchWeather","fetchCities","useClickOutside","LocationButton","LocationIcon","SearchElement","SearchIcon","SearchInput","SearchResult","Suggestion","Search","dispatch","suggestionRef","suggestions","setSuggestions","showSuggestions","setShowSuggestions","searchTerm","setSearchTerm","then","res","onSearchInputChanged","e","target","value","showPosition","position","lat","coords","latitude","lng","longitude","navigator","geolocation","getCurrentPosition","alert","slice","map","s","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { DebounceInput } from 'react-debounce-input';\nimport { useDispatch } from 'react-redux';\nimport { fetchWeather } from '../../store/fetchWeather';\nimport { fetchCities } from './../../api/placeSuggestion';\nimport { useClickOutside } from './../../hooks/useClickOutside';\nimport { LocationButton, LocationIcon, SearchElement, SearchIcon, SearchInput, SearchResult } from './styled';\nimport Suggestion from './Suggestion';\n\nconst Search: React.FC = () => {\n  const dispatch = useDispatch();\n  const suggestionRef = useRef(null);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    if (!searchTerm) {\n      return;\n    }\n    setShowSuggestions(true);\n    fetchCities(searchTerm).then((res) => {\n      setSuggestions(res);\n    });\n  }, [searchTerm]);\n\n  useClickOutside(suggestionRef, () => setShowSuggestions(false));\n\n  const onSearchInputChanged = (e: any) => {\n    setSearchTerm(e.target.value);\n  };\n  const showPosition = (position: any) => {\n    dispatch(\n      fetchWeather({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n      })\n    );\n  };\n  return (\n    <SearchElement>\n      <SearchIcon />\n      <DebounceInput element={SearchInput} debounceTimeout={300} onChange={onSearchInputChanged} placeholder=\"Search for location\" />\n      <LocationButton\n        onClick={() => {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(showPosition);\n          } else {\n            alert('Geolocation is not supported by this browser.');\n          }\n        }}\n      >\n        <LocationIcon />\n      </LocationButton>\n      {showSuggestions && (\n        <SearchResult ref={suggestionRef}>\n          {suggestions?.slice(0, 6)?.map((s, i) => (\n            <Suggestion\n              key={i}\n              label={s}\n              hideSuggestionFn={() => {\n                setShowSuggestions(false);\n              }}\n            />\n          ))}\n        </SearchResult>\n      )}\n    </SearchElement>\n  );\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}