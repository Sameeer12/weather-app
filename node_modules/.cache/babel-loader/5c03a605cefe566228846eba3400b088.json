{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchWeather, transformWeatherData } from '../fetchWeather';\nconst initialState = {\n  weatherData: {\n    main: {\n      feels_like: 0,\n      humidity: 0,\n      pressure: 0,\n      temp: 0,\n      temp_max: 0,\n      temp_min: 0\n    },\n    name: '',\n    sys: {\n      country: '',\n      sunrise: 0,\n      sunset: 0\n    },\n    weather: {\n      id: 200,\n      main: '',\n      description: '',\n      icon: ''\n    },\n    wind: {\n      deg: 0,\n      speed: 0\n    }\n  },\n  extendedWeatherData: [],\n  isError: false\n};\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchWeather.fulfilled, (state, action) => {\n      const res = transformWeatherData(action.payload);\n      state.weatherData = res.weather;\n      state.extendedWeatherData = res.forecast;\n    }).addCase(fetchWeather.rejected, (state, action) => {\n      state.isError = true;\n    });\n  }\n});\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["/Users/sameer/nishant/newfolder/react-weather-app/src/store/reducers/weatherReducer.ts"],"names":["createSlice","fetchWeather","transformWeatherData","initialState","weatherData","main","feels_like","humidity","pressure","temp","temp_max","temp_min","name","sys","country","sunrise","sunset","weather","id","description","icon","wind","deg","speed","extendedWeatherData","isError","weatherSlice","reducers","extraReducers","builder","addCase","fulfilled","state","action","res","payload","forecast","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,iBAAnD;AAQA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE;AACJC,MAAAA,UAAU,EAAE,CADR;AAEJC,MAAAA,QAAQ,EAAE,CAFN;AAGJC,MAAAA,QAAQ,EAAE,CAHN;AAIJC,MAAAA,IAAI,EAAE,CAJF;AAKJC,MAAAA,QAAQ,EAAE,CALN;AAMJC,MAAAA,QAAQ,EAAE;AANN,KADK;AASXC,IAAAA,IAAI,EAAE,EATK;AAUXC,IAAAA,GAAG,EAAE;AACHC,MAAAA,OAAO,EAAE,EADN;AAEHC,MAAAA,OAAO,EAAE,CAFN;AAGHC,MAAAA,MAAM,EAAE;AAHL,KAVM;AAeXC,IAAAA,OAAO,EAAE;AACPC,MAAAA,EAAE,EAAE,GADG;AAEPb,MAAAA,IAAI,EAAE,EAFC;AAGPc,MAAAA,WAAW,EAAE,EAHN;AAIPC,MAAAA,IAAI,EAAE;AAJC,KAfE;AAqBXC,IAAAA,IAAI,EAAE;AACJC,MAAAA,GAAG,EAAE,CADD;AAEJC,MAAAA,KAAK,EAAE;AAFH;AArBK,GADoB;AA2BjCC,EAAAA,mBAAmB,EAAE,EA3BY;AA4BjCC,EAAAA,OAAO,EAAE;AA5BwB,CAAnC;AA+BA,MAAMC,YAAY,GAAG1B,WAAW,CAAC;AAC/BY,EAAAA,IAAI,EAAE,SADyB;AAE/BT,EAAAA,YAF+B;AAG/BwB,EAAAA,QAAQ,EAAE,EAHqB;AAI/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACW7B,YAAY,CAAC8B,SADxB,EACmC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClD,YAAMC,GAAG,GAAGhC,oBAAoB,CAAC+B,MAAM,CAACE,OAAR,CAAhC;AACAH,MAAAA,KAAK,CAAC5B,WAAN,GAAoB8B,GAAG,CAACjB,OAAxB;AACAe,MAAAA,KAAK,CAACR,mBAAN,GAA4BU,GAAG,CAACE,QAAhC;AACD,KALH,EAMGN,OANH,CAMW7B,YAAY,CAACoC,QANxB,EAMkC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KARH;AASD;AAd8B,CAAD,CAAhC;AAiBA,eAAeC,YAAY,CAACY,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { ExtendedForecastData, WeatherData } from '../../api/types';\nimport { fetchWeather, transformWeatherData } from '../fetchWeather';\n\nexport type WeatherState = {\n  weatherData: WeatherData;\n  extendedWeatherData: ExtendedForecastData[];\n  isError: boolean;\n}\n\nconst initialState: WeatherState = {\n  weatherData: {\n    main: {\n      feels_like: 0,\n      humidity: 0,\n      pressure: 0,\n      temp: 0,\n      temp_max: 0,\n      temp_min: 0,\n    },\n    name: '',\n    sys: {\n      country: '',\n      sunrise: 0,\n      sunset: 0,\n    },\n    weather: {\n      id: 200,\n      main: '',\n      description: '',\n      icon: '',\n    },\n    wind: {\n      deg: 0,\n      speed: 0,\n    },\n  },\n  extendedWeatherData: [],\n  isError: false,\n};\n\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchWeather.fulfilled, (state, action) => {\n        const res = transformWeatherData(action.payload);\n        state.weatherData = res.weather;\n        state.extendedWeatherData = res.forecast;\n      })\n      .addCase(fetchWeather.rejected, (state, action) => {\n        state.isError = true;\n      });\n  },\n});\n\nexport default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}