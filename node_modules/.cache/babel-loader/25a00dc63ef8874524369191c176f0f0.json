{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchExtendedForecastData, fetchWeatherData } from '../api/weather';\nimport { getNextSevenDays } from '../utils/dateUtils';\nimport { kelvinToCelcius } from '../utils/unitConversion';\nimport { setIsInitial, setIsLoading } from './reducers/appReducer';\nexport const fetchWeather = createAsyncThunk('weather/fetchWeather', async (city, {\n  dispatch,\n  rejectWithValue,\n  fulfillWithValue\n}) => {\n  dispatch(setIsLoading(true));\n\n  try {\n    const res = await Promise.all([fetchWeatherData(city), fetchExtendedForecastData(city)]);\n    dispatch(setIsLoading(false));\n\n    if (res[0].cod === 200) {\n      dispatch(setIsInitial(false));\n      return res;\n    }\n\n    return rejectWithValue(res[0].message);\n  } catch {\n    dispatch(setIsLoading(false));\n    return rejectWithValue('Error');\n  }\n});\nexport const transformWeatherData = res => {\n  const weather = res[0];\n  const forecast = [];\n  weather.weather = res[0].weather[0];\n  weather.main = { ...weather.main,\n    temp: kelvinToCelcius(weather.main.temp),\n    feels_like: kelvinToCelcius(weather.main.feels_like),\n    temp_max: kelvinToCelcius(weather.main.temp_max),\n    temp_min: kelvinToCelcius(weather.main.temp_min)\n  };\n  weather.wind.speed = Math.round(weather.wind.speed * 3.6);\n  const next7Days = getNextSevenDays();\n  res[1].list.forEach((i, index) => {\n    forecast.push({\n      day: next7Days[index],\n      temp: {\n        temp_max: kelvinToCelcius(i.temp.max),\n        temp_min: kelvinToCelcius(i.temp.min)\n      },\n      weather: {\n        id: i.weather[0].id,\n        main: i.weather[0].main\n      }\n    });\n  });\n  return {\n    weather,\n    forecast\n  };\n};","map":{"version":3,"sources":["/Users/sameer/nishant/newfolder/react-weather-app/src/store/fetchWeather.ts"],"names":["createAsyncThunk","fetchExtendedForecastData","fetchWeatherData","getNextSevenDays","kelvinToCelcius","setIsInitial","setIsLoading","fetchWeather","city","dispatch","rejectWithValue","fulfillWithValue","res","Promise","all","cod","message","transformWeatherData","weather","forecast","main","temp","feels_like","temp_max","temp_min","wind","speed","Math","round","next7Days","list","forEach","i","index","push","day","max","min","id"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { ExtendedForecastData, WeatherData } from '../api/types';\nimport { fetchExtendedForecastData, fetchWeatherData } from '../api/weather';\nimport { getNextSevenDays } from '../utils/dateUtils';\nimport { kelvinToCelcius } from '../utils/unitConversion';\nimport { setIsInitial, setIsLoading } from './reducers/appReducer';\n\nexport const fetchWeather = createAsyncThunk(\n  'weather/fetchWeather',\n  async (city: string | { lat: number; lng: number }, { dispatch, rejectWithValue, fulfillWithValue }) => {\n    dispatch(setIsLoading(true));\n\n    try {\n      const res = await Promise.all([fetchWeatherData(city), fetchExtendedForecastData(city)]);\n      dispatch(setIsLoading(false));\n\n      if (res[0].cod === 200) {\n        dispatch(setIsInitial(false));\n        return res;\n      }\n      return rejectWithValue(res[0].message);\n    } catch {\n      dispatch(setIsLoading(false));\n      return rejectWithValue('Error');\n    }\n  }\n);\n\nexport const transformWeatherData = (\n  res: any\n): {\n  weather: WeatherData;\n  forecast: ExtendedForecastData[];\n} => {\n  const weather = res[0] as WeatherData;\n  const forecast: ExtendedForecastData[] = [];\n\n  weather.weather = res[0].weather[0];\n  weather.main = {\n    ...weather.main,\n    temp: kelvinToCelcius(weather.main.temp),\n    feels_like: kelvinToCelcius(weather.main.feels_like),\n    temp_max: kelvinToCelcius(weather.main.temp_max),\n    temp_min: kelvinToCelcius(weather.main.temp_min),\n  };\n  weather.wind.speed = Math.round(weather.wind.speed * 3.6);\n\n  const next7Days = getNextSevenDays();\n\n  res[1].list.forEach((i: any, index: number) => {\n    forecast.push({\n      day: next7Days[index],\n      temp: {\n        temp_max: kelvinToCelcius(i.temp.max),\n        temp_min: kelvinToCelcius(i.temp.min),\n      },\n      weather: {\n        id: i.weather[0].id,\n        main: i.weather[0].main,\n      },\n    });\n  });\n\n  return {\n    weather,\n    forecast,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}